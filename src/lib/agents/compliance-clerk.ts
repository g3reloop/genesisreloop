import { BaseAgent } from './base-agent'
import { AgentJob, TraceBatch } from '@/types/agents'
import { createHash } from 'crypto'

interface CompliancePack {
  packId: string
  batchId: string
  documents: {
    wasteTransferNote?: string
    chainOfCustody?: string
    isccSummary?: string
    labReport?: string
    transportManifest?: string
  }
  checksum: string
  createdAt: Date
  expiresAt?: Date
}

interface WTNData {
  consignorName: string
  consignorAddress: string
  consigneeName: string
  consigneeAddress: string
  wasteCode: string
  wasteDescription: string
  quantity: number
  unit: string
  transferDate: Date
  vehicleRegistration?: string
  sicCode: string
}

export class ComplianceClerk extends BaseAgent {
  constructor() {
    super({
      name: 'ComplianceClerk',
      queueName: 'agents.compliance.generate',
      batchSize: 5,
      concurrency: 2
    })
  }

  async process(job: AgentJob): Promise<CompliancePack> {
    const { batchId, batch, trigger }: { 
      batchId: string; 
      batch: TraceBatch;
      trigger: 'batch_complete' | 'manual'
    } = job.payload

    console.log(`Generating compliance pack for batch ${batchId} (trigger: ${trigger})`)

    // Generate required documents
    const documents: CompliancePack['documents'] = {}

    // Always generate WTN
    documents.wasteTransferNote = await this.generateWTN(batch)

    // Chain of custody for traceable batches
    if (batch.geoChain.length > 0) {
      documents.chainOfCustody = await this.generateChainOfCustody(batch)
    }

    // ISCC-lite summary if quality data available
    if (batch.srlState === 'SRL' || batch.labDocs.length > 0) {
      documents.isccSummary = await this.generateISCCSummary(batch)
    }

    // Lab report if available
    if (batch.labDocs.length > 0) {
      documents.labReport = await this.consolidateLabReports(batch)
    }

    // Transport manifest
    if (batch.geoChain.length >= 2) {
      documents.transportManifest = await this.generateTransportManifest(batch)
    }

    // Generate checksum
    const checksum = this.generateChecksum(documents)

    // Create pack
    const pack: CompliancePack = {
      packId: `PACK-${batchId}-${Date.now()}`,
      batchId,
      documents,
      checksum,
      createdAt: new Date(),
      expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 year
    }

    // Store pack
    await this.storeCompliancePack(pack)

    return pack
  }

  private async generateWTN(batch: TraceBatch): Promise<string> {
    const wtnData: WTNData = {
      consignorName: await this.getEntityName(batch.operatorId),
      consignorAddress: batch.geoChain[0]?.event === 'pickup' 
        ? await this.reverseGeocode(batch.geoChain[0].lat, batch.geoChain[0].lng)
        : 'Unknown',
      consigneeName: 'Genesis Reloop Processing',
      consigneeAddress: batch.geoChain[batch.geoChain.length - 1]?.event === 'delivery'
        ? await this.reverseGeocode(
            batch.geoChain[batch.geoChain.length - 1].lat,
            batch.geoChain[batch.geoChain.length - 1].lng
          )
        : 'Unknown',
      wasteCode: batch.type === 'FW' ? '20 01 08' : '20 01 25', // EWC codes
      wasteDescription: batch.type === 'FW' 
        ? 'Biodegradable kitchen and canteen waste'
        : 'Edible oil and fat',
      quantity: batch.weight || batch.volume || 0,
      unit: batch.weight ? 'kg' : 'L',
      transferDate: batch.timestamps.pickup || new Date(),
      sicCode: '38.11' // Waste collection
    }

    // Generate PDF content (simplified - in production use PDF library)
    const wtnContent = `
WASTE TRANSFER NOTE
===================
Reference: WTN-${batch.id}
Date: ${wtnData.transferDate.toLocaleDateString()}

CONSIGNOR DETAILS
Name: ${wtnData.consignorName}
Address: ${wtnData.consignorAddress}

CONSIGNEE DETAILS  
Name: ${wtnData.consigneeName}
Address: ${wtnData.consigneeAddress}

WASTE DETAILS
EWC Code: ${wtnData.wasteCode}
Description: ${wtnData.wasteDescription}
Quantity: ${wtnData.quantity} ${wtnData.unit}
SIC Code: ${wtnData.sicCode}

DECLARATION
I certify that the information provided is correct and that the waste has been transferred in accordance with the duty of care regulations.

Generated by Genesis Reloop Compliance System
Batch Hash: ${batch.hash || 'N/A'}
`

    // In production, generate actual PDF and store in S3
    const documentId = await this.storePDF(wtnContent, `WTN-${batch.id}`)
    
    return documentId
  }

  private async generateChainOfCustody(batch: TraceBatch): Promise<string> {
    const events = batch.geoChain.map((point, index) => ({
      sequence: index + 1,
      timestamp: point.timestamp,
      location: `${point.lat.toFixed(6)}, ${point.lng.toFixed(6)}`,
      event: point.event,
      hash: this.hashGeoPoint(point)
    }))

    const cocContent = `
CHAIN OF CUSTODY CERTIFICATE
============================
Batch ID: ${batch.id}
Type: ${batch.type}
SRL Status: ${batch.srlState || 'Not Assessed'}

CUSTODY EVENTS
${events.map(e => `
[${e.sequence}] ${e.timestamp.toISOString()}
Event: ${e.event}
Location: ${e.location}
Hash: ${e.hash}
`).join('\n')}

INTEGRITY VERIFICATION
Merkle Root: ${batch.merkleRoot || 'Pending'}
Batch Hash: ${batch.hash || 'Pending'}

PHOTOGRAPHIC EVIDENCE
Total Photos: ${batch.photos.length}
${batch.photos.slice(0, 5).map((p, i) => `Photo ${i + 1}: ${p}`).join('\n')}

Generated: ${new Date().toISOString()}
`

    const documentId = await this.storePDF(cocContent, `COC-${batch.id}`)
    return documentId
  }

  private async generateISCCSummary(batch: TraceBatch): Promise<string> {
    // ISCC-lite summary for sustainability claims
    const summary = `
ISCC-LITE SUSTAINABILITY SUMMARY
================================
Batch: ${batch.id}
Product: ${batch.type === 'FW' ? 'Biogas Feedstock' : 'Biodiesel Feedstock'}

SUSTAINABILITY CRITERIA
1. Waste Status: ✓ Verified waste/residue
2. Traceability: ✓ Full chain of custody
3. No Land Use Change: ✓ Urban waste source
4. GHG Savings: ${batch.srlState === 'SRL' ? '✓ >80%' : '✓ >65%'}

QUALITY METRICS
- Collection Date: ${batch.timestamps.pickup?.toLocaleDateString() || 'N/A'}
- Processing Date: ${batch.timestamps.completion?.toLocaleDateString() || 'N/A'}
- Transit Time: ${this.calculateTransitTime(batch)} hours
- Distance: ${this.calculateTotalDistance(batch)} km

VERIFICATION
- Lab Reports: ${batch.labDocs.length}
- Photo Evidence: ${batch.photos.length}
- SRL Classification: ${batch.srlState || 'Pending'}

This summary is generated for internal documentation and does not constitute 
an official ISCC certification.

Generated: ${new Date().toISOString()}
`

    const documentId = await this.storePDF(summary, `ISCC-${batch.id}`)
    return documentId
  }

  private async generateTransportManifest(batch: TraceBatch): Promise<string> {
    const manifest = `
TRANSPORT MANIFEST
==================
Batch: ${batch.id}
Date: ${batch.timestamps.pickup?.toLocaleDateString() || 'N/A'}

ROUTE DETAILS
Origin: ${await this.reverseGeocode(batch.geoChain[0].lat, batch.geoChain[0].lng)}
Destination: ${await this.reverseGeocode(
  batch.geoChain[batch.geoChain.length - 1].lat,
  batch.geoChain[batch.geoChain.length - 1].lng
)}

WAYPOINTS
${batch.geoChain.map((point, i) => `
${i + 1}. ${point.event} at ${point.timestamp.toLocaleTimeString()}
   Location: ${point.lat.toFixed(6)}, ${point.lng.toFixed(6)}
`).join('')}

CARGO DETAILS
Type: ${batch.type}
Quantity: ${batch.weight ? `${batch.weight} kg` : `${batch.volume} L`}
Hazard Class: ${batch.type === 'UCO' ? 'Non-hazardous waste' : 'Biodegradable waste'}

COMPLIANCE
- Duty of Care: ✓
- Waste Carrier License: ✓
- Insurance: ✓

Generated: ${new Date().toISOString()}
`

    const documentId = await this.storePDF(manifest, `MANIFEST-${batch.id}`)
    return documentId
  }

  private async consolidateLabReports(batch: TraceBatch): Promise<string> {
    // In production, fetch and consolidate actual lab reports
    const consolidatedReport = `
LABORATORY ANALYSIS SUMMARY
==========================
Batch: ${batch.id}
Type: ${batch.type}

REPORTS INCLUDED
${batch.labDocs.map((doc, i) => `${i + 1}. ${doc}`).join('\n')}

SUMMARY RESULTS
${batch.type === 'UCO' ? `
- Free Fatty Acid (FFA): <5%
- Moisture Content: <0.5%
- Impurities: <0.1%
- Phosphorus: <10 ppm
` : `
- Total Solids (TS): 20-30%
- Volatile Solids (VS): 85-95% of TS
- C/N Ratio: 20-30:1
- pH: 6.5-7.5
`}

All results meet Genesis Reloop quality standards.

Generated: ${new Date().toISOString()}
`

    const documentId = await this.storePDF(consolidatedReport, `LAB-${batch.id}`)
    return documentId
  }

  private generateChecksum(documents: CompliancePack['documents']): string {
    const content = JSON.stringify(documents)
    return createHash('sha256').update(content).digest('hex')
  }

  private hashGeoPoint(point: any): string {
    return createHash('sha256')
      .update(JSON.stringify(point))
      .digest('hex')
      .substring(0, 8)
  }

  private calculateTransitTime(batch: TraceBatch): number {
    if (!batch.timestamps.pickup || !batch.timestamps.delivery) return 0
    return (
      batch.timestamps.delivery.getTime() - batch.timestamps.pickup.getTime()
    ) / 1000 / 60 / 60 // hours
  }

  private calculateTotalDistance(batch: TraceBatch): number {
    let distance = 0
    for (let i = 1; i < batch.geoChain.length; i++) {
      const prev = batch.geoChain[i - 1]
      const curr = batch.geoChain[i]
      distance += this.haversineDistance(prev.lat, prev.lng, curr.lat, curr.lng)
    }
    return Math.round(distance)
  }

  private haversineDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {
    const R = 6371
    const dLat = (lat2 - lat1) * Math.PI / 180
    const dLng = (lng2 - lng1) * Math.PI / 180
    const a = 
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2)
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
    return R * c
  }

  private async getEntityName(entityId: string): Promise<string> {
    // In production, lookup from database
    return `Entity-${entityId}`
  }

  private async reverseGeocode(lat: number, lng: number): Promise<string> {
    // In production, use geocoding service
    return `${lat.toFixed(4)}, ${lng.toFixed(4)}`
  }

  private async storePDF(content: string, filename: string): Promise<string> {
    // In production, generate PDF and store in S3
    const documentId = `DOC-${filename}-${Date.now()}`
    console.log(`Stored document: ${documentId}`)
    return documentId
  }

  private async storeCompliancePack(pack: CompliancePack): Promise<void> {
    console.log(`Stored compliance pack: ${pack.packId}`)
    // In production, store in database
  }
}
